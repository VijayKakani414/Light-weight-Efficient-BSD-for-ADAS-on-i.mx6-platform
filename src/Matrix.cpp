
#include "stdafx.h"
#include "Matrix.h"

#include <stdio.h>


// Matrix operators
void mtx_subst(Matrix a, Matrix b, int row, int col)
{
	int i, j;

	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
			a[i][j] = b[i][j];
}


void mtx_add(Matrix a, Matrix b, int row, int col)
{
	int i, j;

	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
			a[i][j] += b[i][j];

}

void mtx_sub(Matrix a, Matrix b, int row, int col)
{
	int i, j;

	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
			a[i][j] -= b[i][j];

}

void mtx_mul(Matrix a, int row_a, int col_a, Matrix b, int row_b, int col_b, Matrix c)
{
	int i, j, k;

	if(col_a != row_b)
	{
		printf("Matrix multiplication error");
		return;
	}

	for(i = 0; i < row_a; i++)
		for(j = 0; j < col_b; j++)
		{
			c[i][j] = 0;

			for(k = 0; k < col_a; k++)
				c[i][j] += a[i][k] * b[k][j];
		}
}

void mtx_trans(Matrix a, int row, int col, Matrix b)
{
	int i, j;

	for(i = 0; i < row; i++)
		for(j = 0; j < col; j++)
			b[j][i] = a[i][j];
}

void mtx_inv(Matrix a, int row, int col, Matrix b)
{
	if( row != col )
	{
		printf("Matrix inversion error\n");
		return;
	}

	if( row == 4 && col== 4)
	{
		b[0][0] = (a[1][1]*a[2][2]*a[3][3]-a[1][1]*a[2][3]*a[3][2]-a[1][2]*a[2][1]*a[3][3]+a[1][2]*a[2][3]*a[3][1]+a[1][3]*a[2][1]*a[3][2]-a[1][3]*a[2][2]*a[3][1])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[0][1] = -(a[0][1]*a[2][2]*a[3][3]-a[0][1]*a[2][3]*a[3][2]-a[0][2]*a[2][1]*a[3][3]+a[0][2]*a[2][3]*a[3][1]+a[0][3]*a[2][1]*a[3][2]-a[0][3]*a[2][2]*a[3][1])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[0][2] = (a[0][1]*a[1][2]*a[3][3]-a[0][1]*a[1][3]*a[3][2]-a[0][2]*a[1][1]*a[3][3]+a[0][2]*a[1][3]*a[3][1]+a[0][3]*a[1][1]*a[3][2]-a[0][3]*a[1][2]*a[3][1])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[0][3] = -(a[0][1]*a[1][2]*a[2][3]-a[0][1]*a[1][3]*a[2][2]-a[0][2]*a[1][1]*a[2][3]+a[0][2]*a[1][3]*a[2][1]+a[0][3]*a[1][1]*a[2][2]-a[0][3]*a[1][2]*a[2][1])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[1][0] = -(a[1][0]*a[2][2]*a[3][3]-a[1][0]*a[2][3]*a[3][2]-a[1][2]*a[2][0]*a[3][3]+a[1][2]*a[2][3]*a[3][0]+a[1][3]*a[2][0]*a[3][2]-a[1][3]*a[2][2]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[1][1] = (a[0][0]*a[2][2]*a[3][3]-a[0][0]*a[2][3]*a[3][2]-a[0][2]*a[2][0]*a[3][3]+a[0][2]*a[2][3]*a[3][0]+a[0][3]*a[2][0]*a[3][2]-a[0][3]*a[2][2]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[1][2] = -(a[0][0]*a[1][2]*a[3][3]-a[0][0]*a[1][3]*a[3][2]-a[0][2]*a[1][0]*a[3][3]+a[0][2]*a[1][3]*a[3][0]+a[0][3]*a[1][0]*a[3][2]-a[0][3]*a[1][2]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[1][3] = (a[0][0]*a[1][2]*a[2][3]-a[0][0]*a[1][3]*a[2][2]-a[0][2]*a[1][0]*a[2][3]+a[0][2]*a[1][3]*a[2][0]+a[0][3]*a[1][0]*a[2][2]-a[0][3]*a[1][2]*a[2][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[2][0] = (a[1][0]*a[2][1]*a[3][3]-a[1][0]*a[2][3]*a[3][1]-a[1][1]*a[2][0]*a[3][3]+a[1][1]*a[2][3]*a[3][0]+a[1][3]*a[2][0]*a[3][1]-a[1][3]*a[2][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[2][1] = -(a[0][0]*a[2][1]*a[3][3]-a[0][0]*a[2][3]*a[3][1]-a[0][1]*a[2][0]*a[3][3]+a[0][1]*a[2][3]*a[3][0]+a[0][3]*a[2][0]*a[3][1]-a[0][3]*a[2][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[2][2] = (a[0][0]*a[1][1]*a[3][3]-a[0][0]*a[1][3]*a[3][1]-a[0][1]*a[1][0]*a[3][3]+a[0][1]*a[1][3]*a[3][0]+a[0][3]*a[1][0]*a[3][1]-a[0][3]*a[1][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[2][3] = -(a[0][0]*a[1][1]*a[2][3]-a[0][0]*a[1][3]*a[2][1]-a[0][1]*a[1][0]*a[2][3]+a[0][1]*a[1][3]*a[2][0]+a[0][3]*a[1][0]*a[2][1]-a[0][3]*a[1][1]*a[2][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[3][0] = -(a[1][0]*a[2][1]*a[3][2]-a[1][0]*a[2][2]*a[3][1]-a[1][1]*a[2][0]*a[3][2]+a[1][1]*a[2][2]*a[3][0]+a[1][2]*a[2][0]*a[3][1]-a[1][2]*a[2][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[3][1] = (a[0][0]*a[2][1]*a[3][2]-a[0][0]*a[2][2]*a[3][1]-a[0][1]*a[2][0]*a[3][2]+a[0][1]*a[2][2]*a[3][0]+a[0][2]*a[2][0]*a[3][1]-a[0][2]*a[2][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[3][2] = -(a[0][0]*a[1][1]*a[3][2]-a[0][0]*a[1][2]*a[3][1]-a[0][1]*a[1][0]*a[3][2]+a[0][1]*a[1][2]*a[3][0]+a[0][2]*a[1][0]*a[3][1]-a[0][2]*a[1][1]*a[3][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
		b[3][3] = (a[0][0]*a[1][1]*a[2][2]-a[0][0]*a[1][2]*a[2][1]-a[0][1]*a[1][0]*a[2][2]+a[0][1]*a[1][2]*a[2][0]+a[0][2]*a[1][0]*a[2][1]-a[0][2]*a[1][1]*a[2][0])/(a[0][0]*a[1][1]*a[2][2]*a[3][3]-a[0][0]*a[1][1]*a[2][3]*a[3][2]-a[0][0]*a[1][2]*a[2][1]*a[3][3]+a[0][0]*a[1][2]*a[2][3]*a[3][1]+a[0][0]*a[1][3]*a[2][1]*a[3][2]-a[0][0]*a[1][3]*a[2][2]*a[3][1]-a[0][1]*a[1][0]*a[2][2]*a[3][3]+a[0][1]*a[1][0]*a[2][3]*a[3][2]+a[0][1]*a[1][2]*a[2][0]*a[3][3]-a[0][1]*a[1][2]*a[2][3]*a[3][0]-a[0][1]*a[1][3]*a[2][0]*a[3][2]+a[0][1]*a[1][3]*a[2][2]*a[3][0]+a[0][2]*a[1][0]*a[2][1]*a[3][3]-a[0][2]*a[1][0]*a[2][3]*a[3][1]-a[0][2]*a[1][1]*a[2][0]*a[3][3]+a[0][2]*a[1][1]*a[2][3]*a[3][0]+a[0][2]*a[1][3]*a[2][0]*a[3][1]-a[0][2]*a[1][3]*a[2][1]*a[3][0]-a[0][3]*a[1][0]*a[2][1]*a[3][2]+a[0][3]*a[1][0]*a[2][2]*a[3][1]+a[0][3]*a[1][1]*a[2][0]*a[3][2]-a[0][3]*a[1][1]*a[2][2]*a[3][0]-a[0][3]*a[1][2]*a[2][0]*a[3][1]+a[0][3]*a[1][2]*a[2][1]*a[3][0]);
	}
	else if(row == 2 && col == 2)
	{
		b[0][0] = a[1][1]/(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
		b[0][1] = -a[0][1]/(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
		b[1][0] = -a[1][0]/(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
		b[1][1] = a[0][0]/(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
	}
	else
	{
		printf("Matrix size should be 4x4\n");
		return;
	}

}

void mtx_print(Matrix a, int row, int col)
{
	int i, j;

	for(i = 0; i < row; i++)
	{
		for(j = 0; j < col; j++)
			printf("%3.1f ", a[i][j]);
		printf("\n");
	}
}